apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: postgres:10.1
          imagePullPolicy: "IfNotPresent"
          ports:
            - containerPort: 5432
          envFrom:
            - secretRef:
                name: postgres-secret
            - configMapRef:
                name: postgres-config
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: postgredb
            - mountPath: /docker-entrypoint-initdb.d  # Mount the directory for initialization scripts
              name: init-scripts  # Mount the entire ConfigMap as a directory
      volumes:
        - name: postgredb
          persistentVolumeClaim:
            claimName: postgres-pv-claim
          emptyDir: {}
        - name: init-scripts
          configMap:
            name: postgres-init-scripts  # The ConfigMap containing the SQL scripts

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init-scripts
data:
  script.sql: |
    -- Your SQL initialization script here
    CREATE DATABASE IF NOT EXISTS shop;
    \c shop;

    CREATE TABLE users (
      id_user SERIAL PRIMARY KEY,
      email VARCHAR(50) NOT NULL UNIQUE,
      password TEXT NOT NULL,
      name VARCHAR(50),
      last_name VARCHAR(50)
    );

    CREATE TABLE categories (
      id SERIAL PRIMARY KEY,
      name VARCHAR(50) NOT NULL UNIQUE
    );

    CREATE TABLE products (
      id_product SERIAL PRIMARY KEY,
      name VARCHAR(50) NOT NULL,
      price NUMERIC(10, 2),
      imageSrc VARCHAR(255),
      imageAlt VARCHAR(255),
      category_id INT NOT NULL, -- Foreign key referencing categories
      FOREIGN KEY (category_id) REFERENCES categories(id) ON DELETE CASCADE
    );

    CREATE TABLE orders (
      id_order SERIAL PRIMARY KEY,
      id_user INT NOT NULL,
      id_product INT NOT NULL,
      price NUMERIC(10, 2) NOT NULL,
      order_date DATE DEFAULT CURRENT_DATE,
      FOREIGN KEY (id_user) REFERENCES users(id_user) ON DELETE CASCADE,
      FOREIGN KEY (id_product) REFERENCES products(id_product) ON DELETE CASCADE
    );

    INSERT INTO categories (name) 
    VALUES ('Potions');

    INSERT INTO products (name, price, imageSrc, imageAlt, category_id)
    VALUES 
      ('Elixir of Life', 50.00, 'logo.png', 'A glowing golden potion with intricate carvings on the bottle.', (SELECT id FROM categories WHERE name = 'Potions' LIMIT 1)),
      ('Potion of Swiftness', 30.00, 'logo.png', 'A shimmering blue potion swirling with light.', (SELECT id FROM categories WHERE name = 'Potions' LIMIT 1)),
      ('Dragonâ€™s Breath Elixir', 120.00, 'logo.png', 'A fiery red potion with smoke rising from the cork.', (SELECT id FROM categories WHERE name = 'Potions' LIMIT 1)),
      ('Invisibility Draught', 90.00, 'logo.png', 'A translucent potion with a faint silver glow.', (SELECT id FROM categories WHERE name = 'Potions' LIMIT 1)),
      ('Phoenix Tears', 150.00, 'logo.png', 'A radiant bottle with golden liquid and a phoenix feather inside.', (SELECT id FROM categories WHERE name = 'Potions' LIMIT 1));
